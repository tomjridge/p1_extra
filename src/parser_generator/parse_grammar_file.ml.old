module Grammar_to_parser_no_actions = struct

  let f' () =
    let rs = ref [] in
    let add_rule nt rhs = 
      R(nt,rhs) |> fun r -> 
      r |> rule_to_yojson |> Yojson.Safe.pretty_to_string |> print_endline;
      rs:=r::!rs
    in
    let add_action r a = r in
    let star ~sep nt = E_star(sep,nt) in
    let plus ~sep nt = E_plus(sep,nt) in
    let opt = P1_combinators.opt in
    let header () = () in
    let a s = E_TM(A s) in
    let upto_a s = E_TM(Upto_a s) in
    let whitespace_and_comments = E_TM Ws in
    let _AZs = E_TM AZs in
    let azAZs = E_TM AZazs in
    let re s = E_TM (Re s) in
    let eof = E_TM Eof in
    let _GRAMMAR = E_NT Grammar in
    let _RULES = E_NT Rules in
    let _RULE = E_NT Rule in
    let _RHS = E_NT Rhs in
    let _SYMSACT = E_NT Symsact in
    let _CODE = E_NT Code in
    let _RHSSEP = E_NT Rhssep in
    let _SYMS = E_NT Syms in
    let _VAR_EQ_SYM = E_NT Var_eq_sym in
    let _VAR_EQ = E_NT Var_eq in
    let _SYM = E_NT Sym in
    let _NT = E_NT NT in
    let _TM = E_NT TM in  (* TM is a nonterminal - it expands to 'x' etc *)
    ignore (f 
              ~add_rule ~add_action
              ~star ~plus ~opt ~eps:(a "")
              ~header 
              (* terminals *)
              ~a
              ~upto_a  
              ~whitespace_and_comments  (* whitespace and comments *)
              ~_AZs ~azAZs ~re
              ~eof 
              (* nonterminals *)
              ~_GRAMMAR ~_RULES ~_RULE 
              ~_RHS ~_SYMSACT ~_CODE ~_RHSSEP
              ~_SYMS ~_VAR_EQ_SYM ~_VAR_EQ  
              ~_SYM ~_NT ~_TM);
    List.rev !rs

  let rs = f' ()

  let rs = rs |> List.map (function R(e,es) -> (e,es))

  let nts = 
    rs |> List.map (fun (e,es) -> e::es) |> List.concat |> Tjr_list.unique

  let lhs = rs |> List.map (fun (e,es) -> e) |> Tjr_list.unique

  (* NOTE the following is more-or-less independent of the nature of the
     terminals or the nonterminals *)
  let grammar_to_parser' ~rules = 
    let open P1_core in
    let open P1_combinators in
    let open P1_terminals in
    let rec nt_to_parser' nt = 
      let seq_list xs = seq_list xs >> fun xs -> `Seq_list xs in
      let alt_list xs = alt_list xs >> fun xs -> `Alt_list xs in 
      rules |> List.filter (fun (e,_) -> e=nt) |> fun rs ->
      alt_list (
        rs |> List.map @@ fun r -> r |> snd |> List.map elt_to_parser |> seq_list)
    and nt_to_parser nt = nt_to_parser' nt >> fun x -> `NT(nt,x)
    and tm_to_parser' = function
      | A s -> a s
      | Upto_a s -> upto_a s
      | Ws -> ws
      | AZs -> _AZs
      | AZazs -> _AZazs
      | Eof -> eof >> fun _ -> ""
    and tm_to_parser x = tm_to_parser' x >> fun x -> `String x
    and elt_to_parser = function
      | E_star(sep,elt) -> 
        star ~sep:(elt_to_parser sep) (elt_to_parser elt) >> fun xs -> `Star xs
      | E_plus(sep,elt) -> 
        plus ~sep:(elt_to_parser sep) (elt_to_parser elt) >> fun xs -> `Plus xs
      | E_TM tm -> tm_to_parser tm
      | E_NT nt -> nt_to_parser (nt_to_string nt)
    in
    nt_to_parser

  let grammar_to_parser = 
    grammar_to_parser' 
      ~rules:(
        rs |> List.map @@ 
        function (E_NT e,es) -> (nt_to_string e,es) | _ -> failwith __LOC__)


  (* string conversion ------------------------------------------------ *)


  (* for each lhs nt, extract the rules and pretty print *)

  (* hacky way to convert to string *)
  let rec elt_to_string elt = 
    match elt with
    | E_star(sep,x) -> 
      {| (star ~sep:$sep $x) |} 
      |> Tjr_string.replace_list
        ~subs:["$sep",elt_to_string sep; "$x",elt_to_string x]
    | E_plus(sep,x) -> 
      {| (plus ~sep:$sep $x) |} 
      |> Tjr_string.replace_list
        ~subs:["$sep",elt_to_string sep; "$x",elt_to_string x]
    | E_TM A(s) -> 
      {outer| a {|$s|}  |outer} 
      |> Tjr_string.replace_list
        ~subs:["$s",s]
    | E_TM Upto_a(s) -> 
      {outer| upto_a {|$s|}  |outer} 
      |> Tjr_string.replace_list
        ~subs:["$s",s]
    | _ -> 
      elt |> elt_to_yojson 
      |> function `List (`String s::_) -> s | _ -> (failwith __LOC__)

  let _ = E_star(E_TM Ws,E_NT Rules) |> elt_to_yojson

  let rs' = 
    rs |> List.map (fun (e,es) -> elt_to_string e,List.map elt_to_string es)

  let rs'' = 
    rs' |> List.map (fun (e,es) -> (e, Tjr_string.concat_strings ~sep:" **> " es))


end


