(* -*- mode: tuareg -*- *)

(* interactive top-level testing having installed ml files *)

#require "p1_core";;
#require "p1_extra";;



(* examples --------------------------------------------------------- *)

open Tjr_substring
open P1_combinators 

(* for testing FIXME use Tjr_substring.a *)
let a1 (s:substring_) = (
  if s.i_ < s.j_ && s.s_.[s.i_] = '1' then
    [("1",{s with i_ = s.i_ + 1})]
  else
    [])

open P1_core

let a1 : string parser_ = (fun i -> a1 i.ss)

let _ = "11111" |> run_parser (iter ~n:5 a1)
let _ = "1111" |> run_parser (iter ~n:5 a1)
let _ = "111111" |> run_parser (iter ~n:5 a1)

;;
let _ = "1111" |> run_parser (star ~sep:eps a1)


(* parse_grammar_file ----------------------------------------------- *)

open Parse_grammar_file

let _ = grammar_to_parser

let example = {|

S -> E ?ws? ?eof? {{ print_endline (x1 |> string_of_int) }}

E -> E E E {{ x+y+z }}
| "1"  {{ 1 }}
| ""   {{ 0 }}

|}

(* FIXME the following pretty printing is horrible; add actions to grammar_to_parser *)

let x = 
  example |> run_parser (grammar_to_parser "Grammar") 
  |> function [x] -> x

(* 
val x :
  [> `Code of string
   | `Dq of string
   | `Ignore
   | `List of 'a list
   | `Nt of string
   | `Qu of string
   | `Rhs of 'a list
   | `Rule of 'a * 'a
   | `Rules of 'a
   | `Sq of string
   | `String of string
   | `Symsact of 'a list * string ]
  as 'a =
  `Rules
    (`List
       [`Rule
          (`Nt "S",
           `Rhs
             [`List
                [`Symsact
                   ([`Nt "E"; `Qu "ws"; `Qu "eof"],
                    " print_endline (x1 |> string_of_int) ")]]);
        `Rule
          (`Nt "E",
           `Rhs
             [`List
                [`Symsact ([`Nt "E"; `Nt "E"; `Nt "E"], " x+y+z ");
                 `Symsact ([`Dq "1"], " 1 "); `Symsact ([`Dq ""], " 0 ")]])])
*)


(* old --------------------------------------------------------------------- *)


(*

let rec pp x = 
  match x with
  | `NT((s:string),`Alt_list(`Seq_list xs)) -> `NT(s,xs|>List.map pp)
  | `String (s:string) -> `String s
  | `Star xs -> `Star (List.map pp xs)
  | `Plus xs -> `Star (List.map pp xs)

let pp_sym = function
    `NT ("Sym", [`NT ("NT", [`String xxx])]) -> `NT xxx
  | `NT ("Sym", [`NT ("TM", [`String c; `String tm; `String _])]) -> `TM(c,tm)
  | _ -> (failwith __LOC__)

let pp_symsact = function
`NT
     ("Symsact",
      [`NT
         ("Syms",
          [`Star xxx]); _; _]) -> List.map pp_sym xxx
  | _ -> (failwith __LOC__)
   
let pp_rule xs = 
  match xs with
  | [`NT ("Sym", [`NT ("NT", [`String xxx])]); `String _;
     `String "->"; `String _;
     `NT
       ("Rhs",
        [`Star symsacts])] -> (xxx,List.map pp_symsact symsacts)
  | _ -> (failwith __LOC__)

let pp2 x = 
  let rs = ref [] in
  let rec pp2 x = 
    match x with
    | `NT(x,xs) -> (
        match x with
        | "Rule" -> pp_rule xs |> fun x -> rs:=x::!rs
        | _ -> List.iter pp2 xs)
    | `Star xs -> List.iter pp2 xs
    | `String xs -> ()
  in
  pp2 x; List.rev !rs

let _ = pp x |> pp2 

(*

# let _ = pp x |> pp2;;
- : (string * [> `NT of string | `TM of string * string ] list list) list =
[("S", [[`NT "E"; `TM ("?", "ws"); `TM ("?", "eof")]]);
 ("E", [[`NT "E"; `NT "E"; `NT "E"]; [`TM ("\"", "1")]; [`TM ("\"", "")]])]


# let _ = pp x |> pp2;;
- : (string *
     (([ `NT of string * 'b list | `Star of 'a | `String of string ] as 'b)
      list as 'a)
     list)
    list
=
[("S",
  [[`NT ("Sym", [`NT ("NT", [`String "E"])]);
    `NT ("Sym", [`NT ("TM", [`String "?"; `String "ws"; `String "?"])]);
    `NT ("Sym", [`NT ("TM", [`String "?"; `String "eof"; `String "?"])])]]);
 ("E",
  [[`NT ("Sym", [`NT ("NT", [`String "E"])]);
    `NT ("Sym", [`NT ("NT", [`String "E"])]);
    `NT ("Sym", [`NT ("NT", [`String "E"])])];
   [`NT ("Sym", [`NT ("TM", [`String "\""; `String "1"; `String "\""])])];
   [`NT ("Sym", [`NT ("TM", [`String "\""; `String ""; `String "\""])])]])]




# let _ = pp x;;
- : [> `NT of string * 'a list | `Star of 'a list | `String of string ] as 'a
=
`NT
  ("Grammar",
   [`String "\n\n";
    `NT
      ("Rules",
       [`Star
          [`NT
             ("Rule",
              [`NT ("Sym", [`NT ("NT", [`String "S"])]); `String " ";
               `String "->"; `String " ";
               `NT
                 ("Rhs",
                  [`Star
                     [`NT
                        ("Symsact",
                         [`NT
                            ("Syms",
                             [`Star
                                [`NT ("Sym", [`NT ("NT", [`String "E"])]);
                                 `NT
                                   ("Sym",
                                    [`NT
                                       ("TM",
                                        [`String "?"; `String "ws";
                                         `String "?"])]);
                                 `NT
                                   ("Sym",
                                    [`NT
                                       ("TM",
                                        [`String "?"; `String "eof";
                                         `String "?"])])]]);
                          `String " ";
                          `NT
                            ("Code",
                             [`String "{{";
                              `String " print_endline (x1 |> string_of_int) ";
                              `String "}}"])])]])]);
           `NT
             ("Rule",
              [`NT ("Sym", [`NT ("NT", [`String "E"])]); `String " ";
               `String "->"; `String " ";
               `NT
                 ("Rhs",
                  [`Star
                     [`NT
                        ("Symsact",
                         [`NT
                            ("Syms",
                             [`Star
                                [`NT ("Sym", [`NT ("NT", [`String "E"])]);
                                 `NT ("Sym", [`NT ("NT", [`String "E"])]);
                                 `NT ("Sym", [`NT ("NT", [`String "E"])])]]);
                          `String " ";
                          `NT
                            ("Code",
                             [`String "{{"; `String " x+y+z "; `String "}}"])]);
                      `NT
                        ("Symsact",
                         [`NT
                            ("Syms",
                             [`Star
                                [`NT
                                   ("Sym",
                                    [`NT
                                       ("TM",
                                        [`String "\""; `String "1";
                                         `String "\""])])]]);
                          `String "  ";
                          `NT
                            ("Code",
                             [`String "{{"; `String " 1 "; `String "}}"])]);
                      `NT
                        ("Symsact",
                         [`NT
                            ("Syms",
                             [`Star
                                [`NT
                                   ("Sym",
                                    [`NT
                                       ("TM",
                                        [`String "\""; `String "";
                                         `String "\""])])]]);
                          `String "   ";
                          `NT
                            ("Code",
                             [`String "{{"; `String " 0 "; `String "}}"])])]])])]]);
    `String "\n\n"; `String ""])
# 

*)
*)
